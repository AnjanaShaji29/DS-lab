PROGRAM 1
#include <stdio.h>
    void main()
    {
 
        int array1[50], array2[50], array3[100], m, n, i, j, k = 0;
        printf("\n Enter size of array Array 1: ");
        scanf("%d", &m);
 
        printf("\n Enter sorted elements of array 1: \n");
        for (i = 0; i < m; i++) 
        {
            scanf("%d", &array1[i]);
        }
 
        printf("\n Enter size of array 2: ");
        scanf("%d", &n);
 
        printf("\n Enter sorted elements of array 2: \n");
        for (i = 0; i < n; i++) 
        {
            scanf("%d", &array2[i]);
        }
 
        i = 0;
        j = 0;
 
        while (i < m && j < n) 
        {
            if (array1[i] < array2[j]) 
            {
                array3[k] = array1[i];
                i++;
            }
 
            else 
            {
                array3[k] = array2[j];
                j++;
            }
            k++;
        }
 
        if (i >= m) 
        {
            while (j < n) 
            {
                array3[k] = array2[j];
                j++;
                k++;
            }
        }
 
        if (j >= n) 
        {
            while (i < m)
            {
                array3[k] = array1[i];
                i++;
                k++;
            }
        }
 
        printf("\n After merging: \n");
        for (i = 0; i < m + n; i++) 
        {
            printf("\n%d", array3[i]);
        }
 
    }


PROGRAM 2
#include <stdio.h>  
#include<stdlib.h>
 
int queue[100],max;  // array declaration  
int front=-1;  
int rear=-1;  
// function to insert an element in a circular queue  
void enqueue()  
{  int x;
    if((rear+1)%max==front)  // condition to check queue is full  
    {  
        printf("Queue is overflow..");  
    }  
     
    else 
    {
        printf("\nEnter the element to be inserted");
        scanf("%d",&x);
        if(front==-1 && rear==-1)   // condition to check queue is empty  
    {  
        front=0;  
        rear=0;  
        queue[rear]=x;  
    } 
    else  
    {  
          
        rear=(rear+1)%max;       // rear is incremented  
        queue[rear]=x;     // assigning a value to the queue at the rear position.  
    } 
    }
}  
  
// function to delete the element from the queue  
int dequeue()  
{  
    if((front==-1) && (rear==-1))  // condition to check queue is empty  
    {  
        printf("\nQueue is underflow..");  
    }  
 else if(front==rear)  
{  
   printf("\nThe dequeued element is %d", queue[front]);  
   front=-1;  
   rear=-1;  
}   
else  
{  
    printf("\nThe dequeued element is %d", queue[front]);  
   front=(front+1)%max;  
}  
}  
// function to display the elements of a queue  
void display()  
{  
    
    if(front==-1 && rear==-1)  
    {  
        printf("\n Queue is empty..");  
    }  
    else  
    {  
        printf("\nElements in a Queue are :");  
        for(int i=front;;i=(i+1)%max)  
        {
            printf("%d ", queue[i]);  
            if((i+1)%max==rear)
            break;
        }
        
     printf("%d.", queue[rear]);
    }  
}  
void Search()  
{  
    int key,count=0;
    if(front==-1 && rear==-1)  
    {  
        printf("\n Queue is empty..");  
    }  
    else  
    {  
        printf("\nenter the element to be searched");  
        scanf("%d",&key);
        for(int i=front;i<=rear;i=(i+1)%max)  
        {
            printf("%d ", queue[i]);  
            if((i+1)%max==rear)
            break;
            if(queue[i]==key)
                count++;
        }
        
            if(queue[rear]==key)
                count++;
        
        
        if(count>0)
            printf("\nelement is found");
        else
            printf("\nelement not found");
     
    }  
}  

void main()  
{  
    int choice=1,x;   // variables declaration  
    printf("\nEnter the size of array");
    scanf("%d",&max);
    while(choice!=5)   // while loop  
    {  
    printf("\n Press 1: Insert an element");  
    printf("\nPress 2: Delete an element");  
    printf("\nPress 3: Display the element"); 
    printf("\nPress 4: Search the element"); 
    printf("\nPress 5: Exit"); 
    printf("\nEnter your choice");  
    scanf("%d", &choice);  
      
    switch(choice)  
    {  
          
        case 1:  
      
        
        enqueue();  
        break;  
        case 2:  
        dequeue();  
        break;  
        case 3:  
        display(); 
        break;
        case 4: Search();
         break;
        case 5:exit(0);
        default: printf("\nInvalid choice");
  
    }}  
    
}


PROGRAM 3
#include<stdlib.h>
#include<malloc.h>
struct node
{
int data;
struct node *LINK;
};
struct node *header = NULL;
void searching()
{
struct node *top;
int key,pos=0;
top=header;
printf("\nEnter the data to be searched");
scanf("%d",&key);
while(top->data!=key)
{
top=top->LINK;
pos++;
if(top==NULL)
break;
}
if(top==NULL){
printf("\nThe %d value does not exist in the stack ",key);
return;
}
if(top->data==key){
printf("\n%d is available in location '%d'",key,pos+1);
}
}
void pop()
{
struct node *top;
top=header;
if(top==NULL)
{
printf("The stack is empty");
}
else
{
header=top->LINK;
printf("%d deleted ",top->data);
free(top);
}
}
void push()
{
struct node *top;
top=(struct node *)malloc(sizeof(struct node *));
if(top==NULL)
printf("\nNo space available ");
else{
printf("\nEnter the data to be inserted : ");
scanf("%d",&top->data);
top->LINK=NULL;
if(header==NULL)
header=top;
else{
top->LINK=header;
header=top;
}
printf("\n%d inserted into the stack",top->data);
}
}
void display()
{
struct node *top;
if(header==NULL)
printf("stack is empty");
else
{
printf("\nElements in the stack are : ");
top=header;
while(top!=NULL)
{
printf("\t%d",top->data);
top=top->LINK;
}
}
}
void main()
{
int choice;
do
{
printf("\n\n1.Push Operation.\n2.Pop operation\n3.Search\n4.Display\n5.Exit");
printf("\nEnter a choice ");
scanf("%d",&choice);
switch(choice)
{
case 1:push();break;
case 2:pop();break;
case 3:searching();break;
case 4:display();break;
case 5:exit(0);
default: printf("\nChoosen an invalid number");
}
}while(choice!=9);
}


PROGRAM 4
#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>
struct node
{
int data;
struct node *prev;
struct node *next;
};
struct node *header = NULL;
void searching()
{
struct node *temp;
int key,pos=0;
temp=header;
printf("\nEnter the data to be searched");
scanf("%d",&key);
while(temp->data!=key)
{
temp=temp->next;
pos++;
if(temp==NULL)
break;
}
if(temp==NULL){
printf("\nThe %d value does not exist in the list ",key);
return;
}
if(temp->data==key){
printf("\n%d is available in location '%d'",key,pos+1);
}
}
void delete_specific_loc()
{
struct node *temp,*p;
int key;
printf("\nEnter the value of the node to be deleted : ");
scanf("%d",&key);
temp=header;
while(temp->data!=key)
{
p=temp;
temp=temp->next;
if(temp==NULL)
break;
}
if(temp==NULL){
printf("The %d value does not exist in the list ",key);
return;
}
if(temp->data==key){
printf("%d deleted ",temp->data);
p->next=temp->next;
temp->next->prev=p;
free(temp);
}
}
void delete_end()
{
struct node *temp,*p;
temp=header;
while(temp->next!=NULL)
{
p=temp;
temp=temp->next;
}
printf("%d deleted ",temp->data);
free(temp);
p->next=NULL;
}
void delete_begin()
{
struct node *temp;
temp=header;
if(temp==NULL)
{
printf("The list is empty");
}
else
{
header=temp->next;
temp->next->prev=NULL;
printf("%d deleted ",temp->data);
free(temp);
}
}
void insert_end()
{
struct node *temp,*ptr;
ptr=(struct node *)malloc(sizeof(struct node *));
ptr->next=NULL;
temp=header;
if(ptr==NULL)
printf("\nNo space available ");
else
{
while(temp->next!=NULL)
temp=temp->next;
printf("\nEnter the data to be inserted : ");
scanf("%d",&ptr->data);
temp->next=ptr;
ptr->prev=temp;
ptr->next=NULL;
printf("\n%d inserted ",ptr->data);
}
}
void insert_random()
{
int key;
struct node *temp,*ptr;
ptr=(struct node *)malloc(sizeof(struct node *));
ptr->next=NULL;
printf("\nEnter the value of the node after which the new node to be inserted : ");
scanf("%d",&key);
temp=header;
while(temp->data!=key){
temp=temp->next;
if(temp==NULL)
break;
}
if(temp==NULL){
printf("The %d value does not exist in the list ",key);
return;
}
if(temp->data==key){
if(ptr==NULL)
printf("\nNo space available ");
else{
printf("\nEnter the data to be inserted : ");
scanf("%d",&ptr->data);
ptr->next=temp->next;
ptr->prev=temp;
temp->next=ptr;
printf("\n%d inserted after %d ",ptr->data,key);
}
}
}
void insert_begin()
{
struct node *ptr;
ptr=(struct node *)malloc(sizeof(struct node *));
if(ptr==NULL)
    {
    printf("\nNo space available ");
    }
else
    {
    printf("\nEnter the data to be inserted : ");
    scanf("%d",&ptr->data);
    ptr->next=NULL;
    if(header==NULL)
    {
        header=ptr;
        ptr->prev=NULL;
        ptr->next=NULL;
    }
    else
    {
        ptr->prev=NULL;
        ptr->next=header;
        header->prev=ptr;
        header=ptr;
        
    }
printf("\n%d inserted into the list",ptr->data);
}
}
void display()
{
struct node *p;
if(header==NULL)
printf("List is empty");
else{
printf("\nElements in link list are : ");
p=header;
while(p!=NULL){
printf("\t%d",p->data);
p=p->next;
}
}
}
void main()
{
int choice;
do
{
printf("\n\n1.Insert in begining\n2.Insert at last\n3.Insert at any random location\n4.Delete from Beginning\n5.Delete from last\n6.Delete node after specified location\n7.Search for an element\n8.Display\n9.Exit");
printf("\nEnter a choice ");
scanf("%d",&choice);
switch(choice)
{
case 1:insert_begin();break;
case 2:insert_end();break;
case 3:insert_random();break;
case 4:delete_begin();break;
case 5:delete_end();break;
case 6:delete_specific_loc();break;
case 7:searching();break;
case 8:display();break;
case 9:exit(0);
default: printf("\nChoosen an invalid number");
}
}while(choice!=9);
}


PROGRAM 5
#include<stdio.h>
#include<stdlib.h>

struct node
{
        int key;
        struct node *left;
        struct node *right;
        struct node *p;
};

struct node *root=NULL;

void insertion()
{
        int key;
        struct node *ptr,*temp,*temp1;
        ptr=(struct node*)malloc(sizeof(struct node));
        if(ptr==NULL)
                printf("\nNo Space is Available");
        else
        {
                printf("\nEnter the data to be inserted : ");
                scanf("%d",&key);
                ptr->key=key;
                ptr->left=NULL;
                ptr->right=NULL;
                if(root==NULL)
                {
                        ptr->p=NULL;
                        root=ptr;
                }
                else
                {
                        temp=root;
                        while(temp!=NULL)
                        {
                                temp1=temp;
                                if(key < temp->key)
                                        temp=temp->left;
                                else
                                        temp=temp->right;
                        }
                        ptr->p=temp1;
                        if(key< temp1->key)
                            temp1->left=ptr;
                        else
                                temp1->right=ptr;
                }
        }
}

void inorder(struct node *temp)
{
        if(root == NULL)
        {       printf("\nTree is Empty..!!");
                return;
        }
        if (temp==NULL)
        return;
        inorder(temp -> left);
        printf("%d ",temp->key);
        inorder(temp -> right);
}
void transplant(struct node *x,struct node *y)
{
        if(x->p==NULL)
                root=y;
         else if(x==x->p->left)
                x->p->left=y;
        else
                x->p->right=y;
        if(y!=NULL)
                y->p=x->p;
        

}
struct node* tree_minimum(struct node *x)
{
        while (x->left!=NULL)
                x=x->left;
        return x;
}
void deletion()
{
        int  key;
        struct node *temp,*successor;;
        if (root==NULL)
                printf("\nTree is Empty..!!");
        else
        {
            printf("\nEnter the Key to be Deleted : ");
                scanf("%d",&key);
                temp=root;
                while(temp!=NULL && temp->key!=key)
                {       
                        if(key < temp->key)
                                temp=temp->left;
                        else
                                temp=temp->right;
                }

                if(temp==NULL)
                        printf("\nKey is Not Found in the Tree");
                else
                {       if(temp->right==NULL && temp->left==NULL)
                        {   
                            if(temp->p==NULL)
                                root=NULL;
                            else{
                                if(temp==temp->p->left)
                                        temp->p->left=NULL;
                                if(temp==temp->p->right)
                                        temp->p->right=NULL;
                            }

                        }
                        else if(temp->left==NULL)
                            transplant(temp,temp->right);
                        else if(temp->right==NULL)
                                transplant(temp,temp->left);
                        else
                        {
                                successor=tree_minimum(temp->right);
                                if(successor->p!=temp)
                                {
                                        transplant(successor,successor->right);
                                        successor->right=temp->right;
                                        successor->right->p=successor;
                                }
                                transplant(temp,successor);
                                successor->left=temp->left;
                                successor->left->p=successor;
                        }
                        printf("\n%d Deleted from Tree",temp->key);

                }

        }
}

void search()
{
        struct node *temp;
        int item,flag=0;
        temp=root;
        if(root==NULL)
                printf("\nTree is Empty");
        else
        {
                printf("\nEnter the Value to be Searched");
                scanf("%d",&item);
                while(temp!=NULL)
                {
                        if(temp->key==item)
                                flag=1;
                        if(item < temp->key)
                                temp=temp->left;
                        else
                                temp=temp->right;
                }
                if(flag==1)
                        printf("\nElement is Found");
                else
                     printf("\nElement not Found");
        }
}
void main()
{
        int choice=0;
        while(choice!=5)
        {
                printf("\n\n1.Insertion\n2.Deletion\n3.Search\n4.Display\n5.Exit");
                printf("\nEnter the Choice : ");
                scanf("%d",&choice);
                switch(choice)
                {
                        case 1:insertion();break;
                        case 2:deletion();break;
                        case 3:search();break;
                        case 4:inorder(root);break;
                        case 5:exit(0);break;
                        default:printf("\n Choosen an Invalid Choice..!!");
                }
        }
}
