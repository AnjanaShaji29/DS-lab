PROGRAM 1
 #include<stdio.h>
#include<stdlib.h>
struct node{
   struct node *rep;
   struct node *next;
   int data;
}*heads[50],*tails[50];
static int countRoot=0;
void makeSet(int x){
	struct node *new=(struct node *)malloc(sizeof(struct node));
	new->rep=new;
	new->next=NULL;
	new->data=x;
	heads[countRoot]=new;
	tails[countRoot++]=new;
}
struct node* find(int a){
	int i;
	struct node *tmp=(struct node *)malloc(sizeof(struct node));
	for(i=0;i<countRoot;i++){
		tmp=heads[i];
		while(tmp!=NULL){
		if(tmp->data==a)
		return tmp->rep;
		tmp=tmp->next;
		}
 	}
	return NULL;
}
void unionSets(int a,int b){
	int i,pos,flag=0,j;
	struct node *tail2=(struct node *)malloc(sizeof(struct node));
	struct node *rep1=find(a);
	struct node *rep2=find(b);
	if(rep1==NULL||rep2==NULL){
		printf("Element not present in the DS");
		return;
	}
	if(rep1!=rep2){
		for(j=0;j<countRoot;j++){
			if(heads[j]==rep2){
				pos=j;
				flag=1;
				countRoot-=1;
				tail2=tails[j];
				for(i=pos;i<countRoot;i++){
					heads[i]=heads[i+1];
					tails[i]=tails[i+1];
				}}
			if(flag==1)
				break;
		}
		for(j=0;j<countRoot;j++){
			if(heads[j]==rep1){
				tails[j]->next=rep2;
				tails[j]=tail2;
				break;
			}}
		while(rep2!=NULL){
		rep2->rep=rep1;
		rep2=rep2->next;
		}}}
int search(int x){
	int i;
	struct node *tmp=(struct node *)malloc(sizeof(struct node));
	for(i=0;i<countRoot;i++){
		tmp=heads[i];
		if(heads[i]->data==x)
			return 1;	
		while(tmp!=NULL){
			if(tmp->data==x)
				return 1;	
			tmp=tmp->next;
		}}
	return 0;
}
void main(){
int choice,x,i,j,y,flag=0;
	do{	
		printf("\n.......MENU.......1.Make Set......2.Display set representatives.....3.Union.....4.Find Set....5.Exit....");
		printf("\nEnter your choice :  ");
		scanf("%d",&choice);
		switch(choice){
		case 1:	
			printf("Enter new element : ");
			scanf("%d",&x);
			if(search(x)==1)
			printf("Element already present in the disjoint set DS");
			else
				makeSet(x);
			break;
		case 2:
			for(i=0;i<countRoot;i++)
				printf("%d ",heads[i]->data);
			break;
		case 3:
			printf("Enter first element : ");
			scanf("%d",&x);
			printf("Enter second element : ");
			scanf("%d",&y);
			unionSets(x,y);
			break;
		case 4:
			printf("Enter the element");
			scanf("%d",&x);
			struct node *rep=(struct node *)malloc(sizeof(struct node));
			rep=find(x);
			if(rep==NULL)
			printf("\nElement not present in the DS");
			else
			printf("\nThe representative of %d is %d",x,rep->data);
			break;
		case 5:
			exit(0);
		default: 
			printf("\nWrong choice");
			break;
		}}
	while(1);
    };


PROGRAM 2
#include <stdio.h> #define INFINITY 9999
#define MAX 10
void Dijkstra(int Graph[MAX][MAX], int n, int start);
void Dijkstra(int Graph[MAX][MAX], int n, int start) { int cost[MAX][MAX], distance[MAX], pred[MAX]; int visited[MAX], count, mindistance, nextnode, i, j;

// Creating cost matrix for (i = 0; i < n; i++) for (j = 0; j < n; j++)
if (Graph[i][j] == 0) cost[i][j] = INFINITY; else
cost[i][j] = Graph[i][j];

for (i = 0; i < n; i++)
 {
 distance[i] = cost[start][i]; pred[i] = start;
visited[i] = 0;
}
distance[start] = 0;
visited[start] = 1;
count = 1;
while (count < n - 1) { mindistance = INFINITY;
for (i = 0; i < n; i++)
if (distance[i] < mindistance && !visited[i])
 {
 mindistance = distance[i];
nextnode = i;
}
visited[nextnode] = 1; for (i = 0; i < n; i++) if (!visited[i])
if (mindistance + cost[nextnode][i] < distance[i]) { distance[i] = mindistance + cost[nextnode][i]; pred[i] = nextnode;
}
count++;
}

// Printing the distance
for (i = 0; i < n; i++) if (i != start) {
printf("\nDistance from source to %d: %d", i, distance[i]);
}
}
int main() {
int Graph[MAX][MAX], i, j, n, u;

printf("\nEnter the Number of Vertices"); scanf("%d",&n);
printf("Enter the Values for Edges: \n"); for(int i=0;i<n;i++)
{
for(int j=0;j<n;j++)
{
printf("E[%d][%d] : ",i,j);
scanf("%d",&Graph[i][j]);
}

printf("\n");
}


u = 0;
Dijkstra(Graph, n, u); printf("\n");
return 0;
}




PROGRAM 3
#include <stdio.h> #include <stdlib.h> #define MAX_DEGREE 5
#define MAX_NUM_VERTICES 20 struct vertices_s {
int visited; int deg;
int adj[MAX_DEGREE]; /* < 0 if incoming edge */
} vertices[] = {
{0, 3, {2, -3, 4}},
{0, 2, {-1, 3}},
{0, 3, {1, -2, 7}},
{0, 3, {-1, -5, 6}},
{0, 2, {4, -7}},
{0, 3, {-4, 7, -8}},
{0, 4, {-3, 5, -6, -12}},
{0, 3, {6, -9, 11}},
{0, 2, {8, -10}},
{0, 3, {9, -11, -12}},
{0, 3, {-8, 10, 12}},
{0, 3, {7, 10, -11}}
};
int num_vertices = sizeof(vertices) / sizeof(vertices[0]); struct stack_s {
int top;
int items[MAX_NUM_VERTICES];
} stack = {-1, {}};
void stack_push(int v) { stack.top++;
if (stack.top < MAX_NUM_VERTICES)
 
stack.items[stack.top] = v; else {
printf("Stack is full!\n"); exit(1);
}}
int stack_pop() {
return stack.top < 0 ? -1 : stack.items[stack.top--];
}
void dfs(int v, int transpose) { int i, c, n;
vertices[v].visited = 1;
for (i = 0, c = vertices[v].deg; i < c; ++i) { n = vertices[v].adj[i] * transpose;
if (n > 0)
/* n - 1 because vertex indexing begins at 0 */ if (!vertices[n - 1].visited)
dfs(n - 1, transpose);
}
if (transpose < 0) stack_push(v); else
printf("%d ", v + 1);
}
void reset_visited() { int i;
for (i = 0; i < num_vertices; ++i) vertices[i].visited = 0;
}
void order_pass() { int i;
for (i = 0; i < num_vertices; ++i)
 
if (!vertices[i].visited) dfs(i, -1);
}
void scc_pass() { int i = 0, v;
while((v = stack_pop()) != -1) { if (!vertices[v].visited) {
printf("Strongly Connected Component %d: ", ++i); dfs(v, 1);
printf("\n");
} }}
int main(void) 
{
 order_pass(); 
reset_visited(); 
scc_pass(); 
return 0;
}


PROGRAM 4
#include <stdio.h> #define MAX 30 typedef struct edge { int u, v, w;
} edge;
typedef struct edge_list { edge data[MAX];
int n;
} edge_list; edge_list elist;
int Graph[MAX][MAX], n; edge_list spanlist;
void kruskalAlgo();
int find(int belongs[], int vertexno);
void applyUnion(int belongs[], int c1, int c2); void sort();
void print();
void kruskalAlgo() {
int belongs[MAX], i, j, cno1, cno2; elist.n = 0;
for (i = 1; i < n; i++) for (j = 0; j < i; j++) { if (Graph[i][j] != 0) {
elist.data[elist.n].u = i; elist.data[elist.n].v = j; elist.data[elist.n].w = Graph[i][j]; elist.n++;
} }
sort();
for (i = 0; i < n; i++)
 
belongs[i] = i; spanlist.n = 0;
for (i = 0; i < elist.n; i++) {
cno1 = find(belongs, elist.data[i].u); cno2 = find(belongs, elist.data[i].v); if (cno1 != cno2) {
spanlist.data[spanlist.n] = elist.data[i]; spanlist.n = spanlist.n + 1; applyUnion(belongs, cno1, cno2);
}
}
}
int find(int belongs[], int vertexno) { return (belongs[vertexno]);
}
void applyUnion(int belongs[], int c1, int c2) { int i;
for (i = 0; i < n; i++) if (belongs[i] == c2) belongs[i] = c1;
}
void sort() { int i, j; edge temp;
for (i = 1; i < elist.n; i++) for (j = 0; j < elist.n - 1; j++)
if (elist.data[j].w > elist.data[j + 1].w) { temp = elist.data[j];
elist.data[j] = elist.data[j + 1]; elist.data[j + 1] = temp;
}}
 
void print() { int i, cost = 0;
for (i = 0; i < spanlist.n; i++) {
printf("\n%d - %d : %d", spanlist.data[i].u, spanlist.data[i].v, spanlist.data[i].w); cost = cost + spanlist.data[i].w;
}
printf("\nSpanning tree cost: %d", cost); printf("\n");
}
int main() {
int i, j, total_cost;
printf("\nEnter the Number of Vertices"); scanf("%d",&n);

printf("Enter the Values for Edges: \n"); for(int i=0;i<n;i++)
{
for(int j=0;j<n;j++)
{
printf("E[%d][%d] : ",i,j);
scanf("%d",&Graph[i][j]);
}
printf("\n");
}
kruskalAlgo();
 print();
}

