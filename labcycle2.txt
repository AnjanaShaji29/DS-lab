PROGRAM 1

#include <stdio.h> void main()
{
int U[5]={1,2,3,4,5},A[5]={1,0,0,1,1},B[5]={0,1,1,1,0},uni[5],ints[5],diffA[5],diffB[5],
i,compA[5],compB[5];


printf("The universal set : "); for(i=0;i<5;i++) printf("%d\t",U[i]); printf("\nThe Set A : "); for(i=0;i<5;i++)
{

if(A[i]==1)
printf("%d\t",U[i]);

}

printf("\nThe Set B : "); for(i=0;i<5;i++)
{

if(B[i]==1)

printf("%d\t",U[i]);
}

printf("\nBit representation of AUB : "); for(i=0;i<5;i++)
{

uni[i]=A[i]|B[i];

printf("%d\t",uni[i]);
}

printf("\n AUB =\t"); for(i=0;i<5;i++)
 
{

if(uni[i]==1) printf("%d\t",U[i]);
}




printf("\nBit representation of AnB : "); for(i=0;i<5;i++)
{
ints[i]=A[i]&B[i];

printf("%d\t",ints[i]);

}

printf("\n AnB =\t"); for(i=0;i<5;i++)
{

if(ints[i]==1) printf("%d\t",U[i]);
}


printf("\nComplement of A : "); for(i=0;i<5;i++)
{

compA[i]=1-A[i];
printf("%d\t",compA[i]);

}

printf("\nA' =\t"); for(i=0;i<5;i++)
{

if(compA[i]==1) printf("%d\t",U[i]);
}
 

printf("\nComplement of B : "); for(i=0;i<5;i++)
{

compB[i]=1-B[i];

printf("%d\t",compB[i]);
}

printf("\nB' =\t"); for(i=0;i<5;i++)
{

if(compB[i]==1) printf("%d\t",U[i]);
}


printf("\nDifference of A : "); for(i=0;i<5;i++)
{

diffA[i]=A[i]&compB[i];

printf("%d\t",diffA[i]);

}
printf("\n A-B =\t"); for(i=0;i<5;i++)
{
if(diffA[i]==1) printf("%d\t",U[i]);
}


printf("\nDifference of B : "); for(i=0;i<5;i++)
{
diffB[i]=B[i]&compA[i];
 
printf("%d\t",diffB[i]);

}
printf("\n B-A =\t"); for(i=0;i<5;i++)
{

if(diffB[i]==1) printf("%d\t",U[i]);
}


}


PROGRAM 2
#include<stdio.h> #include<stdlib.h>


struct node

{
int key; int color;
struct node *left; struct node *right; struct node *p;
};


struct node *root=NULL;




void left_rotate(struct node *x)

{

struct node *y; y=x->right;
x->right=y->left; if(y->left!=NULL) y->left->p=x;
y->p=x->p;
if(x->p==NULL)

root=y;
else if (x==x->p->left) x->p->left=y;
else

x->p->right=y; y->left=x;
 
x->p=y;

}


void right_rotate(struct node *x)

{

struct node *y = x->left; x->left = y->right;
if (x->left!=NULL) x->left->p = x;
y->p = x->p;

if (x->p==NULL)

root = y;

else if (x == x->p->left) x->p->left = y;
else

x->p->right = y; y->right = x;
x->p = y;

}

void inorder(struct node *temp)
{

if(root == NULL)

{		printf("\nTree is Empty..!!"); return;
}

if (temp==NULL) return;
inorder(temp -> left); if(temp->color==1)
printf("\n%d : RED ",temp->key);
else
 
printf("\n%d : BLACK",temp->key); inorder(temp -> right);
}


void search()

{
struct node *temp; int item,flag=0; temp=root; if(root==NULL)
printf("\nTree is Empty");

else

{
printf("\nEnter the Value to be Searched"); scanf("%d",&item);
while(temp!=NULL)
{

if(temp->key==item) flag=1;
if(item < temp->key) temp=temp->left;
else

temp=temp->right;
}

if(flag==1)

printf("\nElement is Found");
else

printf("\nElement not Found");

}

}
void insert_fixup(struct node *z)
 
{

if(z==root)
{

z->color=0; return;
}


while( z->p->color == 1 && z!=root)

{
if(z->p == z->p->p->left)

{


if( z->p->p->right!=NULL)
{

if(z->p->p->right->color == 1)

{
z->p->color = 0;

z->p->p->right->color = 0;

z->p->p->color = 1; z = z->p->p;
}

}

else
{

if(z == z->p->right)

{
z = z->p; left_rotate(z);
}


z->p->color = 0;
 
z->p->p->color = 1; right_rotate(z->p->p);
}

}


else
{

if(z->p->p->left != NULL)

{
if(z->p->p->left->color == 1)

{

z->p->color = 0;

z->p->p->left->color = 0;
z->p->p->color = 1; z = z->p->p;

}}


else

{
if(z == z->p->left)

{

z = z->p; right_rotate(z);
}


z->p->color = 0;

z->p->p->color = 1; left_rotate(z->p->p);

}
 
}


}


root->color = 0;

}
void insertion()

{

int key;
struct node *ptr,*temp,*temp1;

ptr=(struct node*)malloc(sizeof(struct node)); if(ptr==NULL)
printf("\nNo Space is Available");
else

{

printf("\nEnter the data to be inserted : "); scanf("%d",&key);
ptr->key=key; ptr->left=NULL; ptr->right=NULL; if(root==NULL)
{

ptr->p=NULL; root=ptr;
}

else
{

temp=root; while(temp!=NULL)
{
 
temp1=temp;

if(key < temp->key) temp=temp->left;
else

temp=temp->right;

}
ptr->p=temp1; if(key< temp1->key)
temp1->left=ptr;
else

temp1->right=ptr;

}

ptr->color=1; insert_fixup(ptr);
}

}


void transplant(struct node *x,struct node *y)

{

if(x->p==NULL)
root=y;

else if(x==x->p->left) x->p->left=y;
else

x->p->right=y; if(y!=NULL)
y->p=x->p;

}

struct node* tree_minimum(struct node *x)

{
while (x->left!=NULL)
 
x=x->left; return x;
}




void delete_fixup(struct node *x){ struct node *w;


while(x != root && x->color == 0)
{

if(x == x->p->left){ w = x->p->right;

if(w->color == 1){

w->color = 0;

x->p->color = 1; left_rotate(x->p); w = x->p->right;
}


if(w->left->color == 0 && w->right->color == 0){ w->color = 1;
x->p->color =0; x = x->p;
}

else{


if(w->right->color == 0){

w->color = 1;

w->left->color = 0; right_rotate(w);
 
w = x->p->right;

}


w->color = x->p->color; x->p->color = 0;
x->right->color = 0; left_rotate(x->p);
x = root;


}


}

else{
w = x->p->left;


if(w->color == 1){
w->color = 0;

x->p->color = 0; right_rotate(x->p); w = x->p->left;
}


if(w->left->color == 0 && w->right->color == 0){ w->color = 1;
x->p->color = 0; x = x->p;
}

else{


if(w->left->color == 0){
w->color = 1;
 
w->right->color = 0; left_rotate(w);
w = x->p->left;

}


w->color = x->p->color; x->p->color = 0;
w->left->color = 0; right_rotate(x->p); x = root;


}

}


}


x->color = 0;

}


void deletion()
{

struct node *y, *x,*z; int yOriginalColor,key; if (root==NULL)
printf("\nTree is Empty..!!");

else
{

printf("\nEnter the Key to be Deleted : "); scanf("%d",&key);
z=root;
while(z!=NULL && z->key!=key)
 
{

if(key < z->key) z=z->left;
else

z=z->right;

}


if(z==NULL)

printf("\nKey is Not Found in the Tree");
else

{

y = z;

yOriginalColor = y->color; if(z->left == NULL)
{

x = z->right; transplant(z, z->right);
}

else if(z->right == NULL)

{
x = z->left; transplant(z, z->left);
}
else

{

y = tree_minimum(z->right); yOriginalColor = y->color;


x = y->right;


if(y->p == z)
 
{

x->p = y;

}

else

{

transplant(y, y->right); y->right = z->right;
y->right->p = y;

}


transplant(z, y); y->left = z->left; y->left->p = y;
y->color = z->color;

}


if(yOriginalColor == 0)

{

delete_fixup(x);

}	}	}

}




void main()

{

int choice=1; while(choice!=5)
{


printf("\n\n 1.Insertion\n 2.Deletion\n 3.Display\n 4.Search\n 5.Exit"); printf("\n\n Enter your choice : ");
 
scanf("%d",&choice); switch(choice)
{

case 1:insertion();break; case 2:deletion();break; case 3:inorder(root);break; case 4:search();break;
case 5:exit(0);

default:printf("\n Invalide Choice..!!");
}

}

}

PROGRAM 3
#include <stdio.h>
#include <stdlib.h>

#define M 3

typedef struct _node {


int n; /*n < M No. of keys in node will always less than order of B tree*/


int keys[M - 1];


struct _node *p[M]; /* (n+1 pointers will be in use) */


} node;


node *root = NULL;


typedef enum KeyStatus { Duplicate, SearchFailure, Success, InsertIt, LessKeys,


} KeyStatus;


void insert(int key);


void display(node *root, int);


void DelNode(int x);
 
void search(int x);


KeyStatus ins(node *r, int x, int* y, node** u);


int searchPos(int x, int *key_arr, int n);


KeyStatus del(node *r, int x);


void eatline(void);


void inorder(node *ptr);


int main() {






int key;


int choice;


printf("Creation of B tree for M=%d\n", M);


while (1) {


printf("1.Insert\n2.Delete\n3.Search\n4.Display\n5.Quit\nEnter your choice: ");


scanf("%d", &choice); eatline();


switch (choice) {


case 1:
 

printf("Enter the key: ");


scanf("%d", &key); eatline();


insert(key);


break;


case 2:


printf("Enter the key : ");


scanf("%d", &key); eatline();


DelNode(key);


break;


case 3:


printf("Enter the key : ");


scanf("%d", &key); eatline();


search(key);


break;


case 4:
 
printf("Btree is :\n");


display(root, 0);


break;


case 5:


exit(1);


default:


printf("Wrong choice\n");


break;


}}


return 0;


}


void insert(int key) {


node *newnode;


int upKey;


KeyStatus value;


value = ins(root, key, &upKey, &newnode);
 

if (value == Duplicate)


printf("Key already available\n");


if (value == InsertIt) {


node *uproot = root;


root = (node*)malloc(sizeof(node));


root->n = 1;


root->keys[0] = upKey;


root->p[0] = uproot;


root->p[1] = newnode;


}}


KeyStatus ins(node *ptr, int key, int *upKey, node **newnode) {


node *newPtr, *lastPtr;


int pos, i, n, splitPos;


int newKey, lastKey;


KeyStatus value;
 
if (ptr == NULL) {


*newnode = NULL;


*upKey = key;


return InsertIt;


}


n = ptr->n;


pos = searchPos(key, ptr->keys, n);


if (pos < n && key == ptr->keys[pos])


return Duplicate;


value = ins(ptr->p[pos], key, &newKey, &newPtr);


if (value != InsertIt)


return value;


/*If keys in node is less than M-1 where M is order of B tree*/


if (n < M - 1) {


pos = searchPos(newKey, ptr->keys, n);


/*Shifting the key and pointer right for inserting the new key*/
 

for (i = n; i>pos; i--) {


ptr->keys[i] = ptr->keys[i - 1];


ptr->p[i + 1] = ptr->p[i];


}


/*Key is inserted at exact location*/


ptr->keys[pos] = newKey;


ptr->p[pos + 1] = newPtr;


++ptr->n; /*incrementing the number of keys in node*/


return Success;


}


/*If keys in nodes are maximum and position of node to be inserted is last*/


if (pos == M - 1) {


lastKey = newKey;


lastPtr = newPtr;


}
 
else { /*If keys in node are maximum and position of node to be inserted is not last*/


lastKey = ptr->keys[M - 2];


lastPtr = ptr->p[M - 1];


for (i = M - 2; i>pos; i--) {


ptr->keys[i] = ptr->keys[i - 1];


ptr->p[i + 1] = ptr->p[i];


}


ptr->keys[pos] = newKey;


ptr->p[pos + 1] = newPtr;


}


splitPos = (M - 1) / 2;


(*upKey) = ptr->keys[splitPos];


(*newnode) = (node*)malloc(sizeof(node));/*Right node after split*/


ptr->n = splitPos; /*No. of keys for left splitted node*/


(*newnode)->n = M - 1 - splitPos;/*No. of keys for right splitted node*/


for (i = 0; i < (*newnode)->n; i++) {
 

(*newnode)->p[i] = ptr->p[i + splitPos + 1];


if (i < (*newnode)->n - 1)


(*newnode)->keys[i] = ptr->keys[i + splitPos + 1];


else


(*newnode)->keys[i] = lastKey;


}


(*newnode)->p[(*newnode)->n] = lastPtr;


return InsertIt;


}


void display(node *ptr, int blanks) {


if (ptr) {


int i;


for (i = 1; i <= blanks; i++)


printf(" ");


for (i = 0; i < ptr->n; i++)
 
printf("%d ", ptr->keys[i]);


printf("\n");


for (i = 0; i <= ptr->n; i++)


display(ptr->p[i], blanks + 10);


}}


void search(int key) {


int pos, i, n;


node *ptr = root;


printf("Search path:\n");


while (ptr) {


n = ptr->n;


for (i = 0; i < ptr->n; i++)


printf(" %d", ptr->keys[i]);


printf("\n");


pos = searchPos(key, ptr->keys, n);


if (pos < n && key == ptr->keys[pos]) {
 

printf("Key %d found in position %d of last displayed node\n", key, i);


return;


}


ptr = ptr->p[pos];


}


printf("Key %d is not available\n", key);


}


int searchPos(int key, int *key_arr, int n) {


int pos = 0;


while (pos < n && key > key_arr[pos])


pos++;


return pos;


}
void DelNode(int key) {


node *uproot;


KeyStatus value;
 

value = del(root, key);


switch (value) {


case SearchFailure:


printf("Key %d is not available\n", key);


break;


case LessKeys:


uproot = root;


root = root->p[0];


free(uproot);


break;


default:


return;


}}


KeyStatus del(node *ptr, int key) {


int pos, i, pivot, n, min;
 
int *key_arr;


KeyStatus value;


node **p, *lptr, *rptr;


if (ptr == NULL)


return SearchFailure;


n = ptr->n;


key_arr = ptr->keys;


p = ptr->p;


min = (M - 1) / 2;


//Search for key to delete


pos = searchPos(key, key_arr, n);


if (p[0] == NULL) {


if (pos == n || key < key_arr[pos])


return SearchFailure;


/*Shift keys and pointers left*/


for (i = pos + 1; i < n; i++)
 

{


key_arr[i - 1] = key_arr[i];


p[i] = p[i + 1];


}


return --ptr->n >= (ptr == root ? 1 : min) ? Success : LessKeys;


}


if (pos < n && key == key_arr[pos]) {


node *qp = p[pos], *qp1;


int nkey;


while (1) {


nkey = qp->n;


qp1 = qp->p[nkey];


if (qp1 == NULL)


break;


qp = qp1;
 
}


key_arr[pos] = qp->keys[nkey - 1];


qp->keys[nkey - 1] = key;


}


value = del(p[pos], key);


if (value != LessKeys)


return value;


if (pos > 0 && p[pos - 1]->n > min) {


pivot = pos - 1; /*pivot for left and right node*/


lptr = p[pivot];


rptr = p[pos];


/*Assigns values for right node*/


rptr->p[rptr->n + 1] = rptr->p[rptr->n];


for (i = rptr->n; i>0; i--) {


rptr->keys[i] = rptr->keys[i - 1];


rptr->p[i] = rptr->p[i - 1];
 

}


rptr->n++;


rptr->keys[0] = key_arr[pivot];


rptr->p[0] = lptr->p[lptr->n];


key_arr[pivot] = lptr->keys[--lptr->n];


return Success;


}


if (pos < n && p[pos + 1]->n > min) {


pivot = pos; /*pivot for left and right node*/


lptr = p[pivot];


rptr = p[pivot + 1];


/*Assigns values for left node*/


lptr->keys[lptr->n] = key_arr[pivot];


lptr->p[lptr->n + 1] = rptr->p[0];


key_arr[pivot] = rptr->keys[0];
 
lptr->n++;


rptr->n--;


for (i = 0; i < rptr->n; i++) {


rptr->keys[i] = rptr->keys[i + 1];


rptr->p[i] = rptr->p[i + 1];


}/*End of for*/


rptr->p[rptr->n] = rptr->p[rptr->n + 1];


return Success;


}


if (pos == n)


pivot = pos - 1;


else


pivot = pos;


lptr = p[pivot];


rptr = p[pivot + 1];


lptr->keys[lptr->n] = key_arr[pivot];
 

lptr->p[lptr->n + 1] = rptr->p[0];


for (i = 0; i < rptr->n; i++) {


lptr->keys[lptr->n + 1 + i] = rptr->keys[i];


lptr->p[lptr->n + 2 + i] = rptr->p[i + 1];


}


lptr->n = lptr->n + rptr->n + 1;


free(rptr); /*Remove right node*/


for (i = pos + 1; i < n; i++) {


key_arr[i - 1] = key_arr[i];


p[i] = p[i + 1];


}


return --ptr->n >= (ptr == root ? 1 : min) ? Success : LessKeys;


}


void eatline(void) {


char c;
 
while ((c = getchar()) != '\n');


}


void inorder(node *ptr) {


if (ptr) {


if (ptr->n >= 1) {


inorder(ptr->p[0]);


printf("%d ", ptr->keys[0]);


inorder(ptr->p[1]);


if (ptr->n == 2) {


printf("%d ", ptr->keys[1]);


inorder(ptr->p[2]);


}}}}

